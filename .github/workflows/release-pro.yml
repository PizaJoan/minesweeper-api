name: Release
run-name: Build & Release
on:
  push:
    branches:
      - 'release-**'
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - uses: pnpm/action-setup@v3
        name: Setup pnpm
        with:
          version: 8

      - name: Install deppendencies
        run: pnpm install

      - name: Build
        run: pnpm run build

      # I may need to add the dockerfile so it can build the image after
      - name: Push artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: |
            dist
            package.json
            Dockerfile

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-dist

      - name: Add DB cert
        run: echo "${{ secrets.DB_KEY }}" > cert.ca

      - name: Create out
        run: mkdir out

      - name: Move to out
        run: mv $(ls | grep -v out) out

      - name: Zip dist
        run: tar -czvf app.tar.gz ./out

      - name: Remove out
        run: rm -rf out

      - name: SCP artifact
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: app.tar.gz
          target: /home/ubuntu/services/backend/

      - name: Connect to server
        uses: appleboy/ssh-action@v1.0.3
        env:
          DB_HOST: ${{ vars.DB_HOST }}
          DB_PORT: ${{ vars.DB_PORT }}
          DB_USER: ${{ vars.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ vars.DB_DATABASE }}
        with:
          host: ${{ vars.SSH_HOST }}
          username: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          envs: DB_HOST,DB_PORT,DB_USER,DB_PASSWORD,DB_DATABASE
          script: |
            cd /home/ubuntu/services/backend
            tar -xzvf app.tar.gz
            mv out/dist/* .
            mv out/* .
            rm -rf out
            rm -rf dist
            rm app.tar.gz
            docker build -t minesweeper:api .
            docker run -d -e DB_HOST=$DB_HOST -e DB_PORT=$DB_PORT -e DB_USER=$DB_USER -e DB_PASSWORD=$DB_PASSWORD -e DB_DATABASE=$DB_DATABASE minesweeper:api
          # mkdir .env
          # echo "ISPROD=true" > .env/.env.production
